{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyONVt1fW6sRfy1VbR47oyEy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ZAa0lrwZqP5","executionInfo":{"status":"ok","timestamp":1753086158946,"user_tz":-540,"elapsed":20601,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"ece0c159-e276-4d0a-b8de-8beb13c5ccd5"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/AIFFEL_quest_rs/Exploration/Quest01/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Op9IL8yZ5E-","executionInfo":{"status":"ok","timestamp":1753086242836,"user_tz":-540,"elapsed":1806,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"c025f60b-f54b-4eb5-e0b2-6c74aeb4fc62"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/AIFFEL_quest_rs/Exploration/Quest01\n"]}]},{"cell_type":"code","source":["!git pull origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5WwEfVVgc_5N","executionInfo":{"status":"ok","timestamp":1753086260277,"user_tz":-540,"elapsed":7923,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"0704e5dd-0b86-455d-bb12-a136775aa052"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["From https://github.com/nagujean/AIFFEL_quest_rs\n"," * branch            main       -> FETCH_HEAD\n","Already up to date.\n"]}]},{"cell_type":"code","source":["!git add ."],"metadata":{"id":"WMq5kdVVFYhT","executionInfo":{"status":"ok","timestamp":1753086290447,"user_tz":-540,"elapsed":9177,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["  !git config --global user.email \"nagujean@gmail.com\"\n","  !git config --global user.name \"nagujean\""],"metadata":{"id":"HN_-_4mVFvEK","executionInfo":{"status":"ok","timestamp":1753086401986,"user_tz":-540,"elapsed":250,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["!git commit -m \"commit\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iFM2Q2KOFfS9","executionInfo":{"status":"ok","timestamp":1753086408620,"user_tz":-540,"elapsed":3179,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"bd72952d-1c5d-4fba-f17c-507c256b8c5c"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[main e860dda] commit\n"," 17 files changed, 1004 insertions(+)\n"," create mode 100644 Exploration/Quest01/datasets/binary.csv\n"," create mode 100644 Exploration/Quest01/models/250719_model.pt\n"," create mode 100644 Exploration/Quest01/models/250719_model_state_dict\n"," create mode 100644 Exploration/Quest01/models/checkpoint-1.pt\n"," create mode 100644 Exploration/Quest01/models/checkpoint-10.pt\n"," create mode 100644 Exploration/Quest01/models/checkpoint-2.pt\n"," create mode 100644 Exploration/Quest01/models/checkpoint-3.pt\n"," create mode 100644 Exploration/Quest01/models/checkpoint-4.pt\n"," create mode 100644 Exploration/Quest01/models/checkpoint-5.pt\n"," create mode 100644 Exploration/Quest01/models/checkpoint-6.pt\n"," create mode 100644 Exploration/Quest01/models/checkpoint-7.pt\n"," create mode 100644 Exploration/Quest01/models/checkpoint-8.pt\n"," create mode 100644 Exploration/Quest01/models/checkpoint-9.pt\n"," create mode 100644 Exploration/Quest01/pytoch_2.ipynb\n"," create mode 100644 Exploration/Quest01/pytoch_3.ipynb\n"," create mode 100644 \"Exploration/Quest01/pytoch_3.ipynb\\341\\204\\213\\341\\205\\264 \\341\\204\\211\\341\\205\\241\\341\\204\\207\\341\\205\\251\\341\\206\\253\"\n"," rename Exploration/Quest01/{colab_test.ipynb => pytorch_1.ipynb} (100%)\n"]}]},{"cell_type":"code","source":["!git push origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DDsPOZ5YF9ub","executionInfo":{"status":"ok","timestamp":1753086560759,"user_tz":-540,"elapsed":129032,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"e9633126-d034-4519-d2b7-7e50aa90e812"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: unable to access 'https://github.com/nagujean/AIFFEL_quest_rs.git/': Failed to connect to github.com port 443 after 128856 ms: Connection timed out\n"]}]},{"cell_type":"code","source":["import torch\n","\n","\n","x = torch.FloatTensor(\n","    [\n","        [-0.6577, -0.5797, 0.6360],\n","        [0.7392, 0.2145, 1.523],\n","        [0.2432, 0.5662, 0.322]\n","    ]\n",")"],"metadata":{"id":"K30Yk6K3GT9i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","from torch import nn\n","\n","\n","x = torch.FloatTensor(\n","    [\n","        [-0.6577, -0.5797, 0.6360],\n","        [0.7392, 0.2145, 1.523],\n","        [0.2432, 0.5662, 0.322]\n","    ]\n",")\n","\n","print(nn.BatchNorm1d(3)(x))"],"metadata":{"id":"SOZYOVB1GVEq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from torch import nn\n","\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.layer = nn.Sequential(\n","            nn.Linear(1, 2),\n","            nn.Sigmoid()\n","        )\n","        self.fc = nn.Linear(2, 1)\n","        self._init_weights()\n","\n","    def _init_weights(self):\n","        nn.init.xavier_uniform_(self.layer[0].weight)\n","        self.layer[0].bias.data.fill_(0.01)\n","\n","        nn.init.xavier_uniform_(self.fc.weight)\n","        self.fc.bias.data.fill_(0.01)\n","\n","\n","model = Net()"],"metadata":{"id":"q0gbaP87GcMy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from torch import nn\n","\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.layer = nn.Sequential(\n","            nn.Linear(1, 2),\n","            nn.Sigmoid()\n","        )\n","        self.fc = nn.Linear(2, 1)\n","        self.apply(self._init_weights)\n","\n","    def _init_weights(self, module):\n","        if isinstance(module, nn.Linear):\n","            nn.init.xavier_uniform_(module.weight)\n","            nn.init.constant_(module.bias, 0.01)\n","        print(f\"Apply : {module}\")\n","\n","\n","model = Net()"],"metadata":{"id":"xoNIFJRnGoE9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","from torch import nn\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.layer = nn.Sequential(\n","            nn.Linear(1, 2),\n","            nn.Sigmoid()\n","        )\n","        self.fc = nn.Linear(2, 1)\n","\n","        # apply() 메서드를 호출하여 _init_weights 함수를 모든 하위 모듈에 적용합니다.\n","        self.apply(self._init_weights)\n","\n","    def _init_weights(self, module):\n","        # nn.Linear 타입의 모듈에만 초기화를 적용합니다.\n","        if isinstance(module, nn.Linear):\n","            # 가중치를 Xavier Uniform으로 초기화\n","            nn.init.xavier_uniform_(module.weight)\n","            # 편향을 0.01로 초기화\n","            nn.init.constant_(module.bias, 0.01)\n","\n","        # 어떤 모듈에 _init_weights 함수가 적용되었는지 출력\n","        print(f\"Apply : {module}\")\n","\n","    def forward(self, x):\n","        x = self.layer(x)\n","        x = self.fc(x)\n","        return x\n","\n","# 모델 인스턴스 생성\n","model = Net()\n","\n","print(\"\\n--- 가중치 초기화 결과 확인 ---\")\n","\n","# model.state_dict()를 사용하여 모델의 모든 파라미터 확인\n","# 이 딕셔너리에는 'layer.0.weight', 'layer.0.bias', 'fc.weight', 'fc.bias' 등이 포함됩니다.\n","for name, param in model.named_parameters():\n","    if param.requires_grad:\n","        print(f\"Parameter Name: {name}\")\n","        print(f\"  Weight/Bias Values:\\n{param.data}\")\n","        print(\"-\" * 30)\n","\n","# 특정 레이어의 가중치와 편향을 직접 접근하여 확인하는 방법\n","print(\"\\n--- 특정 레이어의 가중치/편향 직접 확인 ---\")\n","print(\"layer.0 (nn.Linear)의 가중치:\\n\", model.layer[0].weight.data)\n","print(\"layer.0 (nn.Linear)의 편향:\\n\", model.layer[0].bias.data)\n","print(\"-\" * 30)\n","print(\"fc (nn.Linear)의 가중치:\\n\", model.fc.weight.data)\n","print(\"fc (nn.Linear)의 편향:\\n\", model.fc.bias.data)"],"metadata":{"id":"6Q-iB3iaG9XR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"xpEZZGl6Gidy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","print(os.getcwd())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E7aAdiZ0hPU7","executionInfo":{"status":"ok","timestamp":1752759147749,"user_tz":-540,"elapsed":6,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"d246bd38-01a5-491c-adba-c7864da70dc2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/AIFFEL_quest_rs/Exploration/Quest01\n"]}]},{"cell_type":"code","source":["!ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7KomfRemiI5e","executionInfo":{"status":"ok","timestamp":1752911198607,"user_tz":-540,"elapsed":105,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"0d4c4823-e8a4-43aa-92b9-7c5bb9431928"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["datasets  non_linear.csv  pytoch_3.ipynb   Quest01.ipynb\n","models\t  pytoch_2.ipynb  pytorch_1.ipynb  README.md\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4nJ1Zm5sUJPE"},"outputs":[],"source":["#필요 라이브러리\n","\n","import torch #pytorch\n","import pandas as pd #csv 파일 로드\n","from torch import nn #라이버리 내의 neural networks 모듈,Loss/activation function\n","from torch import optim # optimizer\n","from torch.utils.data import Dataset, DataLoader, random_split #데이터유틸리티"]},{"cell_type":"code","source":["# 사용자 정의 데이터 셋\n","\n"," # 새로운 클래스 초기화\n","class CustomDataset(Dataset): #새로운 클래스 정의 -> Dataset 상속받음\n","    def __init__(self, file_path): #객체 초기화 메서드\n","        df = pd.read_csv(file_path) #파일일고 데이터 프레임 저장\n","        self.x1 = df.iloc[:, 0].values #데이터의 첫열 저장\n","        self.x2 = df.iloc[:, 1].values\n","        self.x3 = df.iloc[:, 2].values\n","        self.y = df.iloc[:, 3].values #데이터의 4번열 타겟 저장\n","        self.length = len(df) #테이터 총 행의 수 , 전체크기\n","\n","\n"," # X값과 y값 반환 데이터 구성(혹은 변환)\n","    def __getitem__(self, index): #\n","        x = torch.FloatTensor([self.x1[index], self.x2[index], self.x3[index]])\n","        y = torch.FloatTensor([int(self.y[index])])\n","        return x, y\n","\n","#데이터 전체 크기 반환, 이걸알야야 배치등을 계산할 수 있음\n","    def __len__(self):\n","        return self.length"],"metadata":{"id":"gLafeHNnmc3L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 사용자 정의 모델\n","\n","class CustomModel(nn.Module): #신경망 모듈을 상속 받아 CustomModel 정의\n","    def __init__(self): # 모델 객체 초기화\n","        super().__init__() # 부모클래스 초기화 메서드 호출\n","        self.layer = nn.Sequential(  #여러 레이어를 순차 연결하는 컨테이너 정의\n","          nn.Linear(3, 1), # 입력3개 출력 1개인 '선형 변환' 레이어(가중치 학습)\n","          nn.Sigmoid() #활성화 함수 #0,1 사이 값으로 출력하는 '시그모이드 활성화' 함수\n","        )\n","\n","    def forward(self, x): #모델의 순전파 정의 메서드\n","        x = self.layer(x) #정의된 레이러를 입력x에 순서대로 적용\n","        return x #최종 반환값"],"metadata":{"id":"FMP7wuAMmfr2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터 셋과 데이터 로더\n","\n"," # 데이터셋 로드 및 크기 정의\n","dataset = CustomDataset(\"./datasets/binary.csv\") #csv파일로 부터 데이터 객체 생성\n","dataset_size = len(dataset) #전체 데이터 수 개수 확인\n","train_size = int(dataset_size * 0.8) #훈련용 데이터 사이즈 지정\n","validation_size = int(dataset_size * 0.1) #검증용 데이터 사이즈 지정\n","test_size = dataset_size - train_size - validation_size #테스트 데이터 사이즈 지정\n","\n"," # 데이터 셋 분할\n","train_dataset, validation_dataset, test_dataset = random_split(dataset, [train_size, validation_size, test_size], torch.manual_seed(4))\n"," # 데이터로더 생성\n","train_dataloader = DataLoader(train_dataset, batch_size=64, shuffle=True, drop_last=True)\n","validation_dataloader = DataLoader(validation_dataset, batch_size=4, shuffle=True, drop_last=True)\n","test_dataloader = DataLoader(test_dataset, batch_size=4, shuffle=True, drop_last=True)"],"metadata":{"id":"Waz2nyJomtxG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# GPU 연산 적용\n","\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\" #디바이스 gpu/cpu 설정\n","model = CustomModel().to(device) #모델 인스턴스 생성 및 디바이스 이동\n","criterion = nn.BCELoss().to(device) #손실함수 이진교차 엔트로피 정의 및 디바이스 이동\n","optimizer = optim.SGD(model.parameters(), lr=0.0001) # 옵티마이저 SGD 정의"],"metadata":{"id":"FSYpCUk_ngmB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 학습 진행\n","\n","#체크 포인트 지정\n","checkpoint = 1\n"," #에포크 지정\n","for epoch in range(10000): #진행할 에포크 수\n","    cost = 0.0 # 누적손실 초기화\n","\n"," #데이터로더를 통해 미니 배치 단위로 데이터 로드 및 학습\n","    for x, y in train_dataloader:\n","        x = x.to(device)\n","        y = y.to(device)\n","\n","        output = model(x) #모델에 입력을 넣어 순전파 실행\n","        loss = criterion(output, y) #손실 계산\n","\n","        optimizer.zero_grad() #이전 역전파에서 계산된 가중치를 0초기화\n","        loss.backward() #역전파:손실에 대한 모델 파라미터들의 가중치 계산\n","        optimizer.step() #계산된 가중치를 모델 파라미터 업데이트\n","\n","        cost += loss #현재 미니배치의 손실을 에포크의 총 손실에 누적\n","\n","    cost = cost / len(train_dataloader) # 한 에포크의 평균 손실 계산\n","\n","#체크포인트\n","    if (epoch + 1) % 1000 == 0:\n","        torch.save(\n","            {\n","                \"model\": \"CustomModel\",\n","                \"epoch\": epoch,\n","                \"model_state_dict\": model.state_dict(),\n","                \"optimizer_state_dict\": optimizer.state_dict(),\n","                \"cost\": cost,\n","                \"description\": f\"CustomModel 체크포인트-{checkpoint}\",\n","            },\n","            f\"./models/checkpoint-{checkpoint}.pt\",\n","        )\n","        checkpoint += 1\n","\n","\n"," # 학습 진행 상황 출력\n","    if (epoch + 1) % 1000 == 0: # 1천 단위 출력\n","        print(f\"Epoch : {epoch+1:4d}, Model : {list(model.parameters())}, Cost : {cost:.3f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vjtWX4p_noY3","executionInfo":{"status":"ok","timestamp":1752913933490,"user_tz":-540,"elapsed":214318,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"8e62b40f-3e87-4fc7-fca3-0ed15793a108"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch : 1000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 25.811\n","Epoch : 2000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 25.968\n","Epoch : 3000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 25.682\n","Epoch : 4000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 25.959\n","Epoch : 5000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 25.995\n","Epoch : 6000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 25.736\n","Epoch : 7000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 25.829\n","Epoch : 8000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 25.779\n","Epoch : 9000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 25.696\n","Epoch : 10000, Model : [Parameter containing:\n","tensor([[-0.4518, -0.3668,  0.1015]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.2057], device='cuda:0', requires_grad=True)], Cost : 26.061\n"]}]},{"cell_type":"code","source":["# 모델 평가\n","\n"," #모델 평가 모드 설정\n","with torch.no_grad(): # 기울기 계산 비활성화 자동미분 기능 사용하지 않도록 메모리사용량 줄여 추론에 적합한 상태로\n","    model.eval() # 모델 평가모드로 전환\n","    for x, y in validation_dataloader: # 검증 데이터 로더 미니 배치 가져옴\n","        x = x.to(device) #입력데이터를 설정된 디바이스로 이동\n","        y = y.to(device) #레이블 데이터를 설정된 디바이스로 이동\n","\n","        outputs = model(x) #모델에 입력데이터를 넣어서 순전파 실행\n"," #예측 결과 출력 및 이진 분류 임계값 적용\n","        print(outputs) #모델의 원본 예측값 시그모이드 통과후 0~1사이 확률값 출력\n","        #예측값이 0.5 이상이면 True, 아니면 False로 변환하여 이진 분류 결과 출력\n","        print(outputs >= torch.FloatTensor([0.5]).to(device))\n","        print(\"--------------------\")"],"metadata":{"id":"-EVJbZILqIB6","executionInfo":{"status":"ok","timestamp":1752760357215,"user_tz":-540,"elapsed":12,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"7d2af135-6785-4a3d-9fde-57a73374e383","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.6707],\n","        [0.7298],\n","        [0.7368],\n","        [0.7800]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.5723],\n","        [0.6746],\n","        [0.4676],\n","        [0.3640]], device='cuda:0')\n","tensor([[ True],\n","        [ True],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[0.5711],\n","        [0.6363],\n","        [0.3985],\n","        [0.6238]], device='cuda:0')\n","tensor([[ True],\n","        [ True],\n","        [False],\n","        [ True]], device='cuda:0')\n","--------------------\n","tensor([[0.6304],\n","        [0.7174],\n","        [0.5751],\n","        [0.6137]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.7460],\n","        [0.6951],\n","        [0.7555],\n","        [0.6498]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.8068],\n","        [0.7557],\n","        [0.6456],\n","        [0.7380]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.4245],\n","        [0.7069],\n","        [0.5908],\n","        [0.7803]], device='cuda:0')\n","tensor([[False],\n","        [ True],\n","        [ True],\n","        [ True]], device='cuda:0')\n","--------------------\n","tensor([[0.7010],\n","        [0.7245],\n","        [0.6922],\n","        [0.3698]], device='cuda:0')\n","tensor([[ True],\n","        [ True],\n","        [ True],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[0.5778],\n","        [0.6604],\n","        [0.5856],\n","        [0.7111]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.4945],\n","        [0.7144],\n","        [0.6279],\n","        [0.6441]], device='cuda:0')\n","tensor([[False],\n","        [ True],\n","        [ True],\n","        [ True]], device='cuda:0')\n","--------------------\n","tensor([[0.7215],\n","        [0.6991],\n","        [0.7697],\n","        [0.5773]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.6765],\n","        [0.4486],\n","        [0.7386],\n","        [0.7285]], device='cuda:0')\n","tensor([[ True],\n","        [False],\n","        [ True],\n","        [ True]], device='cuda:0')\n","--------------------\n","tensor([[0.6775],\n","        [0.5103],\n","        [0.5580],\n","        [0.6634]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.5301],\n","        [0.5563],\n","        [0.3649],\n","        [0.4759]], device='cuda:0')\n","tensor([[ True],\n","        [ True],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[0.7732],\n","        [0.7340],\n","        [0.7242],\n","        [0.6318]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.6975],\n","        [0.3844],\n","        [0.5528],\n","        [0.4122]], device='cuda:0')\n","tensor([[ True],\n","        [False],\n","        [ True],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[0.4621],\n","        [0.7796],\n","        [0.5776],\n","        [0.6426]], device='cuda:0')\n","tensor([[False],\n","        [ True],\n","        [ True],\n","        [ True]], device='cuda:0')\n","--------------------\n","tensor([[0.6681],\n","        [0.4632],\n","        [0.4959],\n","        [0.4399]], device='cuda:0')\n","tensor([[ True],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[0.7320],\n","        [0.5588],\n","        [0.6654],\n","        [0.4713]], device='cuda:0')\n","tensor([[ True],\n","        [ True],\n","        [ True],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[0.5140],\n","        [0.7236],\n","        [0.5794],\n","        [0.5472]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.6813],\n","        [0.5783],\n","        [0.6476],\n","        [0.3883]], device='cuda:0')\n","tensor([[ True],\n","        [ True],\n","        [ True],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[0.3664],\n","        [0.7196],\n","        [0.7116],\n","        [0.6520]], device='cuda:0')\n","tensor([[False],\n","        [ True],\n","        [ True],\n","        [ True]], device='cuda:0')\n","--------------------\n","tensor([[0.6375],\n","        [0.5122],\n","        [0.6827],\n","        [0.6221]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n","tensor([[0.7563],\n","        [0.6743],\n","        [0.3967],\n","        [0.7840]], device='cuda:0')\n","tensor([[ True],\n","        [ True],\n","        [False],\n","        [ True]], device='cuda:0')\n","--------------------\n","tensor([[0.5797],\n","        [0.7276],\n","        [0.6039],\n","        [0.5545]], device='cuda:0')\n","tensor([[True],\n","        [True],\n","        [True],\n","        [True]], device='cuda:0')\n","--------------------\n"]}]},{"cell_type":"code","source":["# 모델 저장\n","torch.save(\n","    model,\n","    \"models/250719_model.pt\"\n",")\n","\n","torch.save(\n","    model.state_dict(),\n","    \"models/250719_model_state_dict\"\n",")"],"metadata":{"id":"ZQXGq1F7kx-J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 모델 불러오기\n","\n","# 라이브러리\n","import torch\n","from torch import nn\n","import torch.serialization # 필요한 모듈 임포트\n","\n","#커스텀 모델 정의\n","class CustomModel(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.layer = nn.Sequential(\n","            nn.Linear(3, 1), # 입력3개 출력 1개인 '선형 변환' 레이어(가중치 학습)\n","            nn.Sigmoid() #활성화 함수 #0,1 사이 값으로 출력하는 '시그모이드 활성화' 함수\n","        )\n","\n","    def forward(self, x): #모델의 순전파 정의 메서드\n","        x = self.layer(x) #정의된 레이러를 입력x에 순서대로 적용\n","        return x #최종 반환값\n","\n","# GPU 연산 적용 및 모델 설정\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\" # GPU(CUDA) 사용 가능 여부 확인 후 디바이스 설정\n","\n","# CustomModel과 torch.nn.Sequential, torch.nn.Linear, torch.nn.Sigmoid 클래스를 안전한 전역으로 등록\n","torch.serialization.add_safe_globals([CustomModel, torch.nn.Sequential, torch.nn.Linear, torch.nn.Sigmoid])\n","\n","model = torch.load(\"models/250719_model.pt\", map_location=device)\n","print(model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9GdukGMUmrPx","executionInfo":{"status":"ok","timestamp":1752912441636,"user_tz":-540,"elapsed":6,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"3ce82238-162c-4f49-d03c-e631d3c4cabf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CustomModel(\n","  (layer): Sequential(\n","    (0): Linear(in_features=3, out_features=1, bias=True)\n","    (1): Sigmoid()\n","  )\n",")\n"]}]},{"cell_type":"code","source":["# 모델 평가\n","with torch.no_grad(): # 평가 시 경사 계산 비활성화\n","    model.eval()     # 모델을 평가 모드로 전환 (Dropout, BatchNorm 등 영향)\n","    for x, y in validation_dataloader: # 검증 데이터로더에서 배치 가져오기\n","        x = x.to(device) # 입력 데이터를 디바이스로 이동\n","        y = y.to(device) # 레이블 데이터를 디바이스로 이동\n","\n","        outputs = model(x) # 모델의 예측값 계산\n","\n","        print(outputs) # 원본 예측 확률 출력\n","        # 0.5를 기준으로 이진 분류 결과 출력 (True/False)\n","        print(outputs >= torch.FloatTensor([0.5]).to(device))\n","        print(\"--------------------\") # 배치 구분선"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ziQZZzZ5mrCO","executionInfo":{"status":"ok","timestamp":1752912478291,"user_tz":-540,"elapsed":614,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"5e880af2-7357-4ed4-b7dd-2ded89c69fb8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[4.7533e-23],\n","        [9.8041e-03],\n","        [5.3054e-28],\n","        [1.3380e-34]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[5.2723e-18],\n","        [2.1121e-14],\n","        [5.0499e-20],\n","        [7.2326e-18]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[7.4872e-21],\n","        [3.5017e-27],\n","        [1.5012e-30],\n","        [5.8616e-07]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[6.2297e-20],\n","        [3.1219e-26],\n","        [8.0370e-26],\n","        [9.7110e-05]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[6.8929e-04],\n","        [1.6930e-03],\n","        [5.2726e-27],\n","        [1.9183e-04]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.9996e-15],\n","        [6.2102e-14],\n","        [4.6720e-23],\n","        [1.6323e-28]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[9.1844e-28],\n","        [1.4285e-21],\n","        [1.2066e-25],\n","        [4.2259e-22]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[3.4913e-21],\n","        [1.1484e-14],\n","        [7.0308e-24],\n","        [1.6864e-25]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.4284e-23],\n","        [2.0518e-02],\n","        [8.2471e-23],\n","        [2.4695e-13]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[8.9018e-26],\n","        [3.0965e-30],\n","        [3.2128e-22],\n","        [2.9980e-25]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[3.5787e-28],\n","        [9.2704e-09],\n","        [4.1546e-09],\n","        [2.0717e-29]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[8.0023e-17],\n","        [4.6476e-23],\n","        [2.0491e-19],\n","        [5.7143e-18]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[3.3257e-21],\n","        [1.5027e-28],\n","        [1.1672e-19],\n","        [1.0328e-29]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[1.8745e-12],\n","        [1.1411e-23],\n","        [1.1798e-28],\n","        [6.4296e-25]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[1.7370e-06],\n","        [7.6425e-20],\n","        [1.8264e-17],\n","        [2.8745e-07]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.0798e-18],\n","        [5.9537e-05],\n","        [9.1876e-31],\n","        [5.7538e-28]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.2424e-21],\n","        [7.3550e-09],\n","        [2.1128e-31],\n","        [1.1422e-19]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[5.2015e-05],\n","        [1.2153e-26],\n","        [8.2911e-32],\n","        [2.5216e-28]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[9.2366e-28],\n","        [1.1635e-18],\n","        [2.5674e-21],\n","        [6.2180e-28]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[6.2946e-25],\n","        [4.7380e-08],\n","        [6.7199e-12],\n","        [3.7211e-19]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[1.3831e-08],\n","        [1.9976e-05],\n","        [1.3756e-24],\n","        [3.9222e-21]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.4543e-16],\n","        [1.7812e-29],\n","        [2.8292e-09],\n","        [2.9625e-15]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.5611e-24],\n","        [2.3383e-16],\n","        [7.5278e-21],\n","        [5.3442e-13]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.1298e-26],\n","        [1.3577e-21],\n","        [1.6438e-02],\n","        [2.4420e-18]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.6485e-17],\n","        [5.5702e-15],\n","        [9.5302e-15],\n","        [2.6724e-20]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n"]}]},{"cell_type":"code","source":["# 모델 구조확인\n","\n","# 라이브러리\n","import torch\n","from torch import nn\n","import torch.serialization # 필요한 모듈 임포트\n","\n","#커스텀 모델 정의\n","class CustomModel(nn.Module):\n","    pass\n","\n","# GPU 연산 적용 및 모델 설정\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\" # GPU(CUDA) 사용 가능 여부 확인 후 디바이스 설정\n","\n","# CustomModel과 torch.nn.Sequential, torch.nn.Linear, torch.nn.Sigmoid 클래스를 안전한 전역으로 등록\n","torch.serialization.add_safe_globals([CustomModel, torch.nn.Sequential, torch.nn.Linear, torch.nn.Sigmoid])\n","\n","model = torch.load(\"models/250719_model.pt\", map_location=device)\n","print(model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZckjQMaCtbW5","executionInfo":{"status":"ok","timestamp":1752912776510,"user_tz":-540,"elapsed":10,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"d04d6e70-ddb3-4ce2-bd80-0afa5a6ef47b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CustomModel(\n","  (layer): Sequential(\n","    (0): Linear(in_features=3, out_features=1, bias=True)\n","    (1): Sigmoid()\n","  )\n",")\n"]}]},{"cell_type":"code","source":["# 모델의 상태 불러오기\n","\n","# 라이브러리\n","import torch\n","from torch import nn\n","\n","\n","#커스텀 모델 정의\n","class CustomModel(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.layer = nn.Sequential(\n","            nn.Linear(3, 1), # 입력3개 출력 1개인 '선형 변환' 레이어(가중치 학습)\n","            nn.Sigmoid() #활성화 함수 #0,1 사이 값으로 출력하는 '시그모이드 활성화' 함수\n","        )\n","\n","    def forward(self, x): #모델의 순전파 정의 메서드\n","        x = self.layer(x) #정의된 레이러를 입력x에 순서대로 적용\n","        return x #최종 반환값\n","\n","# GPU 연산 적용 및 모델 설정\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\" # GPU(CUDA) 사용 가능 여부 확인 후 디바이스 설정\n","model = CustomModel().to(device) # 모델 인스턴스 생성 및 디바이스로 이동\n","\n","# 모델의 상태 불러오기\n","model.load_state_dict(torch.load(\"models/250719_model_state_dict\"))\n","\n","print(model)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V8ZsasrQu_6G","executionInfo":{"status":"ok","timestamp":1752913142055,"user_tz":-540,"elapsed":9,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"7ac84c1b-3e8d-4dfe-9973-672de6672e39"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CustomModel(\n","  (layer): Sequential(\n","    (0): Linear(in_features=3, out_features=1, bias=True)\n","    (1): Sigmoid()\n","  )\n",")\n"]}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nvT200u3u_2j","executionInfo":{"status":"ok","timestamp":1752913165516,"user_tz":-540,"elapsed":21,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"dafdf192-a3a9-4771-ed71-10b8a0ae148c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[6.8929e-04],\n","        [3.3257e-21],\n","        [2.0491e-19],\n","        [7.5278e-21]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.4695e-13],\n","        [8.0023e-17],\n","        [2.4420e-18],\n","        [7.0308e-24]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[7.3550e-09],\n","        [8.0370e-26],\n","        [5.7538e-28],\n","        [3.7211e-19]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[1.2066e-25],\n","        [1.3577e-21],\n","        [4.6476e-23],\n","        [1.9183e-04]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[1.3831e-08],\n","        [1.5027e-28],\n","        [6.2180e-28],\n","        [3.5017e-27]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[5.8616e-07],\n","        [5.7143e-18],\n","        [1.6323e-28],\n","        [1.1411e-23]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.1128e-31],\n","        [1.8264e-17],\n","        [9.1876e-31],\n","        [8.2911e-32]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[8.9018e-26],\n","        [2.9996e-15],\n","        [2.0798e-18],\n","        [3.2128e-22]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[4.7380e-08],\n","        [1.7370e-06],\n","        [2.3383e-16],\n","        [2.6724e-20]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[4.2259e-22],\n","        [2.5611e-24],\n","        [2.2424e-21],\n","        [3.5787e-28]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[9.5302e-15],\n","        [3.4913e-21],\n","        [6.2946e-25],\n","        [9.7110e-05]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[5.2726e-27],\n","        [8.2471e-23],\n","        [5.2015e-05],\n","        [1.3756e-24]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[5.9537e-05],\n","        [1.6930e-03],\n","        [1.2153e-26],\n","        [1.1798e-28]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[1.1672e-19],\n","        [2.5216e-28],\n","        [1.9976e-05],\n","        [7.2326e-18]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.8745e-07],\n","        [2.6485e-17],\n","        [2.1298e-26],\n","        [9.2366e-28]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[5.3054e-28],\n","        [1.7812e-29],\n","        [6.2297e-20],\n","        [6.4296e-25]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.0518e-02],\n","        [1.1635e-18],\n","        [5.0499e-20],\n","        [9.8041e-03]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[7.6425e-20],\n","        [1.0328e-29],\n","        [1.3380e-34],\n","        [2.8292e-09]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[9.1844e-28],\n","        [4.6720e-23],\n","        [1.1484e-14],\n","        [2.9625e-15]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[4.1546e-09],\n","        [1.6438e-02],\n","        [4.7533e-23],\n","        [2.4543e-16]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[5.3442e-13],\n","        [3.9222e-21],\n","        [1.8745e-12],\n","        [3.0965e-30]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.1121e-14],\n","        [5.5702e-15],\n","        [2.4284e-23],\n","        [1.5012e-30]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[1.6864e-25],\n","        [5.2723e-18],\n","        [2.9980e-25],\n","        [2.5674e-21]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[2.0717e-29],\n","        [7.4872e-21],\n","        [3.1219e-26],\n","        [1.4285e-21]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n","tensor([[1.1422e-19],\n","        [6.7199e-12],\n","        [9.2704e-09],\n","        [6.2102e-14]], device='cuda:0')\n","tensor([[False],\n","        [False],\n","        [False],\n","        [False]], device='cuda:0')\n","--------------------\n"]}]},{"cell_type":"code","source":["# 체크 포인트 불러오기\n","\n","# 필요한 라이브러리 임포트\n","import torch # PyTorch 라이브러리\n","import pandas as pd # 데이터 처리 라이브러리\n","from torch import nn # 신경망 모듈\n","from torch import optim # 옵티마이저 모듈\n","from torch.utils.data import Dataset, DataLoader, random_split # 데이터 유틸리티\n","\n","# 사용자 정의 데이터셋 클래스 정의\n","class CustomDataset(Dataset):\n","    def __init__(self, file_path):\n","        # CSV 파일 로드 및 특성(x)과 레이블(y) 분리\n","        df = pd.read_csv(file_path)\n","        self.x1 = df.iloc[:, 0].values\n","        self.x2 = df.iloc[:, 1].values\n","        self.x3 = df.iloc[:, 2].values\n","        self.y = df.iloc[:, 3].values\n","        self.length = len(df) # 데이터셋의 총 길이\n","\n","    def __getitem__(self, index):\n","        # 특정 인덱스의 데이터와 레이블을 PyTorch 텐서로 반환\n","        x = torch.FloatTensor([self.x1[index], self.x2[index], self.x3[index]])\n","        y = torch.FloatTensor([int(self.y[index])])\n","        return x, y\n","\n","    def __len__(self):\n","        # 데이터셋의 총 길이 반환\n","        return self.length\n","\n","# 사용자 정의 모델 클래스 정의\n","class CustomModel(nn.Module):\n","    def __init__(self):\n","        super().__init__() # 부모 클래스 초기화\n","        # 선형 레이어와 시그모이드 활성화 함수로 구성된 순차적 모델 정의\n","        self.layer = nn.Sequential(\n","            nn.Linear(3, 1), # 입력 3개, 출력 1개인 선형 레이어\n","            nn.Sigmoid()     # 0과 1 사이의 값으로 변환하는 시그모이드 활성화 함수\n","        )\n","\n","    def forward(self, x):\n","        # 모델의 순전파 로직 정의\n","        x = self.layer(x)\n","        return x\n","\n","# 데이터셋 로드, 분할 및 데이터로더 생성\n","dataset = CustomDataset(\"./datasets/binary.csv\") # CustomDataset 객체 생성 (데이터 파일 경로 지정)\n","dataset_size = len(dataset)                       # 전체 데이터셋 크기\n","train_size = int(dataset_size * 0.8)              # 훈련 세트 크기 (80%)\n","validation_size = int(dataset_size * 0.1)         # 검증 세트 크기 (10%)\n","test_size = dataset_size - train_size - validation_size # 테스트 세트 크기 (나머지)\n","\n","# 데이터셋을 훈련, 검증, 테스트 세트로 무작위 분할 (재현성을 위해 시드 고정)\n","train_dataset, validation_dataset, test_dataset = random_split(\n","    dataset, [train_size, validation_size, test_size], torch.manual_seed(4)\n",")\n","\n","# DataLoader를 사용하여 각 데이터셋을 미니 배치 단위로 준비\n","train_dataloader = DataLoader(train_dataset, batch_size=64, shuffle=True, drop_last=True)\n","validation_dataloader = DataLoader(validation_dataset, batch_size=4, shuffle=True, drop_last=True)\n","test_dataloader = DataLoader(test_dataset, batch_size=4, shuffle=True, drop_last=True)\n","\n","# GPU 연산 적용 및 모델 설정\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\" # GPU(CUDA) 사용 가능 여부 확인 후 디바이스 설정\n","model = CustomModel().to(device)                       # CustomModel 인스턴스 생성 및 디바이스로 이동\n","criterion = nn.BCELoss().to(device)                    # 이진 교차 엔트로피 손실 함수 정의 및 디바이스로 이동\n","optimizer = optim.SGD(model.parameters(), lr=0.0001)   # SGD 옵티마이저 정의 (모델 파라미터와 학습률 지정)\n","\n","#체크포인트 불러오기\n","checkpoint = torch.load(\"./models/checkpoint-10.pt\")\n","model.load_state_dict(checkpoint[\"model_state_dict\"])\n","optimizer.load_state_dict(checkpoint[\"optimizer_state_dict\"])\n","checkpoint_epoch = checkpoint[\"epoch\"]\n","checkpoint_description = checkpoint[\"description\"]\n","print(checkpoint_description)\n","\n","# 모델 학습 진행 (Training Loop)\n","for epoch in range(10000): # 총 10,000 에포크 동안 학습 반복\n","    cost = 0.0 # 현재 에포크의 누적 손실 초기화\n","\n","    for x, y in train_dataloader: # 훈련 데이터로더에서 배치 단위로 데이터 가져오기\n","        x = x.to(device) # 입력 데이터를 디바이스로 이동\n","        y = y.to(device) # 레이블 데이터를 디바이스로 이동\n","\n","        output = model(x) # 순전파: 모델을 통해 예측값 계산\n","        loss = criterion(output, y) # 손실 계산: 예측값과 실제값 비교\n","\n","        optimizer.zero_grad() # 이전 경사값 초기화\n","        loss.backward()       # 역전파: 손실에 대한 경사 계산\n","        optimizer.step()      # 파라미터 업데이트: 계산된 경사를 이용해 모델 가중치 조정\n","\n","        cost += loss # 현재 배치 손실을 누적\n","\n","    cost = cost / len(train_dataloader) # 에포크의 평균 손실 계산\n","\n","    if (epoch + 1) % 1000 == 0: # 1000 에포크마다 진행 상황 출력\n","        print(f\"Epoch : {epoch+1:4d}, Model : {list(model.parameters())}, Cost : {cost:.3f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZSodvC_1u_om","executionInfo":{"status":"ok","timestamp":1752914466410,"user_tz":-540,"elapsed":220391,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"2f56588c-800d-442e-884b-98a8a3ff3e34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CustomModel 체크포인트-10\n","Epoch : 1000, Model : [Parameter containing:\n","tensor([[ 0.0028, -0.0006,  0.0036]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([0.0949], device='cuda:0', requires_grad=True)], Cost : 0.680\n","Epoch : 2000, Model : [Parameter containing:\n","tensor([[0.0034, 0.0005, 0.0041]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([-0.0346], device='cuda:0', requires_grad=True)], Cost : 0.666\n","Epoch : 3000, Model : [Parameter containing:\n","tensor([[0.0045, 0.0017, 0.0051]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([-0.1609], device='cuda:0', requires_grad=True)], Cost : 0.652\n","Epoch : 4000, Model : [Parameter containing:\n","tensor([[0.0052, 0.0017, 0.0053]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([-0.2843], device='cuda:0', requires_grad=True)], Cost : 0.636\n","Epoch : 5000, Model : [Parameter containing:\n","tensor([[0.0059, 0.0036, 0.0064]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([-0.4046], device='cuda:0', requires_grad=True)], Cost : 0.627\n","Epoch : 6000, Model : [Parameter containing:\n","tensor([[0.0065, 0.0034, 0.0068]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([-0.5220], device='cuda:0', requires_grad=True)], Cost : 0.613\n","Epoch : 7000, Model : [Parameter containing:\n","tensor([[0.0064, 0.0036, 0.0069]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([-0.6366], device='cuda:0', requires_grad=True)], Cost : 0.604\n","Epoch : 8000, Model : [Parameter containing:\n","tensor([[0.0073, 0.0050, 0.0079]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([-0.7485], device='cuda:0', requires_grad=True)], Cost : 0.591\n","Epoch : 9000, Model : [Parameter containing:\n","tensor([[0.0074, 0.0058, 0.0082]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([-0.8577], device='cuda:0', requires_grad=True)], Cost : 0.585\n","Epoch : 10000, Model : [Parameter containing:\n","tensor([[0.0089, 0.0070, 0.0096]], device='cuda:0', requires_grad=True), Parameter containing:\n","tensor([-0.9644], device='cuda:0', requires_grad=True)], Cost : 0.576\n"]}]},{"cell_type":"code","source":["# 코드 전체 묶음"],"metadata":{"id":"SDw_DD5Imqj8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 필요한 라이브러리 임포트\n","import torch # PyTorch 라이브러리\n","import pandas as pd # 데이터 처리 라이브러리\n","from torch import nn # 신경망 모듈\n","from torch import optim # 옵티마이저 모듈\n","from torch.utils.data import Dataset, DataLoader, random_split # 데이터 유틸리티\n","\n","# 사용자 정의 데이터셋 클래스 정의\n","class CustomDataset(Dataset):\n","    def __init__(self, file_path):\n","        # CSV 파일 로드 및 특성(x)과 레이블(y) 분리\n","        df = pd.read_csv(file_path)\n","        self.x1 = df.iloc[:, 0].values\n","        self.x2 = df.iloc[:, 1].values\n","        self.x3 = df.iloc[:, 2].values\n","        self.y = df.iloc[:, 3].values\n","        self.length = len(df) # 데이터셋의 총 길이\n","\n","    def __getitem__(self, index):\n","        # 특정 인덱스의 데이터와 레이블을 PyTorch 텐서로 반환\n","        x = torch.FloatTensor([self.x1[index], self.x2[index], self.x3[index]])\n","        y = torch.FloatTensor([int(self.y[index])])\n","        return x, y\n","\n","    def __len__(self):\n","        # 데이터셋의 총 길이 반환\n","        return self.length\n","\n","# 사용자 정의 모델 클래스 정의\n","class CustomModel(nn.Module):\n","    def __init__(self):\n","        super().__init__() # 부모 클래스 초기화\n","        # 선형 레이어와 시그모이드 활성화 함수로 구성된 순차적 모델 정의\n","        self.layer = nn.Sequential(\n","            nn.Linear(3, 1), # 입력 3개, 출력 1개인 선형 레이어\n","            nn.Sigmoid()     # 0과 1 사이의 값으로 변환하는 시그모이드 활성화 함수\n","        )\n","\n","    def forward(self, x):\n","        # 모델의 순전파 로직 정의\n","        x = self.layer(x)\n","        return x\n","\n","# 데이터셋 로드, 분할 및 데이터로더 생성\n","dataset = CustomDataset(\"./datasets/binary.csv\") # CustomDataset 객체 생성 (데이터 파일 경로 지정)\n","dataset_size = len(dataset)                       # 전체 데이터셋 크기\n","train_size = int(dataset_size * 0.8)              # 훈련 세트 크기 (80%)\n","validation_size = int(dataset_size * 0.1)         # 검증 세트 크기 (10%)\n","test_size = dataset_size - train_size - validation_size # 테스트 세트 크기 (나머지)\n","\n","# 데이터셋을 훈련, 검증, 테스트 세트로 무작위 분할 (재현성을 위해 시드 고정)\n","train_dataset, validation_dataset, test_dataset = random_split(\n","    dataset, [train_size, validation_size, test_size], torch.manual_seed(4)\n",")\n","\n","# DataLoader를 사용하여 각 데이터셋을 미니 배치 단위로 준비\n","train_dataloader = DataLoader(train_dataset, batch_size=64, shuffle=True, drop_last=True)\n","validation_dataloader = DataLoader(validation_dataset, batch_size=4, shuffle=True, drop_last=True)\n","test_dataloader = DataLoader(test_dataset, batch_size=4, shuffle=True, drop_last=True)\n","\n","# GPU 연산 적용 및 모델 설정\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\" # GPU(CUDA) 사용 가능 여부 확인 후 디바이스 설정\n","model = CustomModel().to(device)                       # CustomModel 인스턴스 생성 및 디바이스로 이동\n","criterion = nn.BCELoss().to(device)                    # 이진 교차 엔트로피 손실 함수 정의 및 디바이스로 이동\n","optimizer = optim.SGD(model.parameters(), lr=0.0001)   # SGD 옵티마이저 정의 (모델 파라미터와 학습률 지정)\n","\n","# 모델 학습 진행 (Training Loop)\n","for epoch in range(10000): # 총 10,000 에포크 동안 학습 반복\n","    cost = 0.0 # 현재 에포크의 누적 손실 초기화\n","\n","    for x, y in train_dataloader: # 훈련 데이터로더에서 배치 단위로 데이터 가져오기\n","        x = x.to(device) # 입력 데이터를 디바이스로 이동\n","        y = y.to(device) # 레이블 데이터를 디바이스로 이동\n","\n","        output = model(x) # 순전파: 모델을 통해 예측값 계산\n","        loss = criterion(output, y) # 손실 계산: 예측값과 실제값 비교\n","\n","        optimizer.zero_grad() # 이전 경사값 초기화\n","        loss.backward()       # 역전파: 손실에 대한 경사 계산\n","        optimizer.step()      # 파라미터 업데이트: 계산된 경사를 이용해 모델 가중치 조정\n","\n","        cost += loss # 현재 배치 손실을 누적\n","\n","    cost = cost / len(train_dataloader) # 에포크의 평균 손실 계산\n","\n","    if (epoch + 1) % 1000 == 0: # 1000 에포크마다 진행 상황 출력\n","        print(f\"Epoch : {epoch+1:4d}, Model : {list(model.parameters())}, Cost : {cost:.3f}\")\n","\n","# 모델 평가\n","with torch.no_grad(): # 평가 시 경사 계산 비활성화\n","    model.eval()     # 모델을 평가 모드로 전환 (Dropout, BatchNorm 등 영향)\n","    for x, y in validation_dataloader: # 검증 데이터로더에서 배치 가져오기\n","        x = x.to(device) # 입력 데이터를 디바이스로 이동\n","        y = y.to(device) # 레이블 데이터를 디바이스로 이동\n","\n","        outputs = model(x) # 모델의 예측값 계산\n","\n","        print(outputs) # 원본 예측 확률 출력\n","        # 0.5를 기준으로 이진 분류 결과 출력 (True/False)\n","        print(outputs >= torch.FloatTensor([0.5]).to(device))\n","        print(\"--------------------\") # 배치 구분선\n","\n","# 모델 저장\n","# 전체 모델 저장 (환경 종속성 있음, 개발/테스트용)\n","torch.save(\n","    model,\n","    \".models/250719_model.pt\"\n",")\n","\n","# 모델의 state_dict (파라미터만) 저장 (권장되는 방법, 유연성 높음)\n","torch.save(\n","    model.state_dict(),\n","    \".models/250719_model_state_dict\"\n",")"],"metadata":{"id":"cadljCZ5mokj"},"execution_count":null,"outputs":[]}]}