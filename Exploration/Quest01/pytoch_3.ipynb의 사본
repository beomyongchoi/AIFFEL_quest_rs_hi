{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNHtXf+AtP3RM2UIqa82+t4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ZAa0lrwZqP5","executionInfo":{"status":"ok","timestamp":1753086158946,"user_tz":-540,"elapsed":20601,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"ece0c159-e276-4d0a-b8de-8beb13c5ccd5"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/AIFFEL_quest_rs/Exploration/Quest01/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Op9IL8yZ5E-","executionInfo":{"status":"ok","timestamp":1753086242836,"user_tz":-540,"elapsed":1806,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"c025f60b-f54b-4eb5-e0b2-6c74aeb4fc62"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/AIFFEL_quest_rs/Exploration/Quest01\n"]}]},{"cell_type":"code","source":["!git pull origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5WwEfVVgc_5N","executionInfo":{"status":"ok","timestamp":1753086260277,"user_tz":-540,"elapsed":7923,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"0704e5dd-0b86-455d-bb12-a136775aa052"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["From https://github.com/nagujean/AIFFEL_quest_rs\n"," * branch            main       -> FETCH_HEAD\n","Already up to date.\n"]}]},{"cell_type":"code","source":["!git add ."],"metadata":{"id":"WMq5kdVVFYhT","executionInfo":{"status":"ok","timestamp":1753086750736,"user_tz":-540,"elapsed":862,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["  !git config --global user.email \"nagujean@gmail.com\"\n","  !git config --global user.name \"nagujean\""],"metadata":{"id":"HN_-_4mVFvEK","executionInfo":{"status":"ok","timestamp":1753086401986,"user_tz":-540,"elapsed":250,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["!git commit -m \"commit\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iFM2Q2KOFfS9","executionInfo":{"status":"ok","timestamp":1753086754834,"user_tz":-540,"elapsed":399,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"f742730e-0740-4f7e-9bab-07ea42dfc9fb"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["[main ef1a820] commit\n"," 1 file changed, 1 insertion(+), 1 deletion(-)\n"," rewrite \"Exploration/Quest01/pytoch_3.ipynb\\341\\204\\213\\341\\205\\264 \\341\\204\\211\\341\\205\\241\\341\\204\\207\\341\\205\\251\\341\\206\\253\" (93%)\n"]}]},{"cell_type":"code","source":["!git push origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DDsPOZ5YF9ub","executionInfo":{"status":"ok","timestamp":1753086763118,"user_tz":-540,"elapsed":2153,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"f8030300-e953-4384-dc91-75e64eff17ad"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Enumerating objects: 31, done.\n","Counting objects:   3% (1/31)\rCounting objects:   6% (2/31)\rCounting objects:   9% (3/31)\rCounting objects:  12% (4/31)\rCounting objects:  16% (5/31)\rCounting objects:  19% (6/31)\rCounting objects:  22% (7/31)\rCounting objects:  25% (8/31)\rCounting objects:  29% (9/31)\rCounting objects:  32% (10/31)\rCounting objects:  35% (11/31)\rCounting objects:  38% (12/31)\rCounting objects:  41% (13/31)\rCounting objects:  45% (14/31)\rCounting objects:  48% (15/31)\rCounting objects:  51% (16/31)\rCounting objects:  54% (17/31)\rCounting objects:  58% (18/31)\rCounting objects:  61% (19/31)\rCounting objects:  64% (20/31)\rCounting objects:  67% (21/31)\rCounting objects:  70% (22/31)\rCounting objects:  74% (23/31)\rCounting objects:  77% (24/31)\rCounting objects:  80% (25/31)\rCounting objects:  83% (26/31)\rCounting objects:  87% (27/31)\rCounting objects:  90% (28/31)\rCounting objects:  93% (29/31)\rCounting objects:  96% (30/31)\rCounting objects: 100% (31/31)\rCounting objects: 100% (31/31), done.\n","Delta compression using up to 2 threads\n","Compressing objects:   3% (1/26)\rCompressing objects:   7% (2/26)\rCompressing objects:  11% (3/26)\rCompressing objects:  15% (4/26)\rCompressing objects:  19% (5/26)\rCompressing objects:  23% (6/26)\rCompressing objects:  26% (7/26)\rCompressing objects:  30% (8/26)\rCompressing objects:  34% (9/26)\rCompressing objects:  38% (10/26)\rCompressing objects:  42% (11/26)\rCompressing objects:  46% (12/26)\rCompressing objects:  50% (13/26)\rCompressing objects:  53% (14/26)\rCompressing objects:  57% (15/26)\rCompressing objects:  61% (16/26)\rCompressing objects:  65% (17/26)\rCompressing objects:  69% (18/26)\rCompressing objects:  73% (19/26)\rCompressing objects:  76% (20/26)\rCompressing objects:  80% (21/26)\rCompressing objects:  84% (22/26)\rCompressing objects:  88% (23/26)\rCompressing objects:  92% (24/26)\rCompressing objects:  96% (25/26)\rCompressing objects: 100% (26/26)\rCompressing objects: 100% (26/26), done.\n","Writing objects:   3% (1/27)\rWriting objects:   7% (2/27)\rWriting objects:  11% (3/27)\rWriting objects:  14% (4/27)\rWriting objects:  18% (5/27)\rWriting objects:  22% (6/27)\rWriting objects:  25% (7/27)\rWriting objects:  29% (8/27)\rWriting objects:  33% (9/27)\rWriting objects:  37% (10/27)\rWriting objects:  44% (12/27)\rWriting objects:  48% (13/27)\rWriting objects:  51% (14/27)\rWriting objects:  55% (15/27)\rWriting objects:  59% (16/27)\rWriting objects:  62% (17/27)\rWriting objects:  66% (18/27)\rWriting objects:  70% (19/27)\rWriting objects:  74% (20/27)\rWriting objects:  77% (21/27)\rWriting objects:  81% (22/27)\rWriting objects:  85% (23/27)\rWriting objects:  88% (24/27)\rWriting objects:  92% (25/27)\rWriting objects:  96% (26/27)\rWriting objects: 100% (27/27)\rWriting objects: 100% (27/27), 31.24 KiB | 744.00 KiB/s, done.\n","Total 27 (delta 15), reused 0 (delta 0), pack-reused 0\n","remote: Resolving deltas: 100% (15/15), completed with 2 local objects.\u001b[K\n","To https://github.com/nagujean/AIFFEL_quest_rs.git\n","   36ba7b3..ef1a820  main -> main\n"]}]},{"cell_type":"code","source":["import torch\n","\n","\n","x = torch.FloatTensor(\n","    [\n","        [-0.6577, -0.5797, 0.6360],\n","        [0.7392, 0.2145, 1.523],\n","        [0.2432, 0.5662, 0.322]\n","    ]\n",")"],"metadata":{"id":"K30Yk6K3GT9i","executionInfo":{"status":"ok","timestamp":1753086787475,"user_tz":-540,"elapsed":3638,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["import torch\n","from torch import nn\n","\n","\n","x = torch.FloatTensor(\n","    [\n","        [-0.6577, -0.5797, 0.6360],\n","        [0.7392, 0.2145, 1.523],\n","        [0.2432, 0.5662, 0.322]\n","    ]\n",")\n","\n","print(nn.BatchNorm1d(3)(x))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SOZYOVB1GVEq","executionInfo":{"status":"ok","timestamp":1753086789266,"user_tz":-540,"elapsed":92,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"9a73d337-26a2-49ae-dfc4-3a26576f7d0a"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-1.3246, -1.3492, -0.3756],\n","        [ 1.0912,  0.3077,  1.3685],\n","        [ 0.2334,  1.0415, -0.9930]], grad_fn=<NativeBatchNormBackward0>)\n"]}]},{"cell_type":"code","source":["from torch import nn\n","\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.layer = nn.Sequential(\n","            nn.Linear(1, 2),\n","            nn.Sigmoid()\n","        )\n","        self.fc = nn.Linear(2, 1)\n","        self._init_weights()\n","\n","    def _init_weights(self):\n","        nn.init.xavier_uniform_(self.layer[0].weight)\n","        self.layer[0].bias.data.fill_(0.01)\n","\n","        nn.init.xavier_uniform_(self.fc.weight)\n","        self.fc.bias.data.fill_(0.01)\n","\n","\n","model = Net()"],"metadata":{"id":"q0gbaP87GcMy","executionInfo":{"status":"ok","timestamp":1753086807887,"user_tz":-540,"elapsed":20,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["from torch import nn\n","\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.layer = nn.Sequential(\n","            nn.Linear(1, 2),\n","            nn.Sigmoid()\n","        )\n","        self.fc = nn.Linear(2, 1)\n","        self.apply(self._init_weights)\n","\n","    def _init_weights(self, module):\n","        if isinstance(module, nn.Linear):\n","            nn.init.xavier_uniform_(module.weight)\n","            nn.init.constant_(module.bias, 0.01)\n","        print(f\"Apply : {module}\")\n","\n","\n","model = Net()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xoNIFJRnGoE9","executionInfo":{"status":"ok","timestamp":1753086812702,"user_tz":-540,"elapsed":34,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"744cabaf-535f-4e15-9d5f-5d8e7ef5f39f"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Apply : Linear(in_features=1, out_features=2, bias=True)\n","Apply : Sigmoid()\n","Apply : Sequential(\n","  (0): Linear(in_features=1, out_features=2, bias=True)\n","  (1): Sigmoid()\n",")\n","Apply : Linear(in_features=2, out_features=1, bias=True)\n","Apply : Net(\n","  (layer): Sequential(\n","    (0): Linear(in_features=1, out_features=2, bias=True)\n","    (1): Sigmoid()\n","  )\n","  (fc): Linear(in_features=2, out_features=1, bias=True)\n",")\n"]}]},{"cell_type":"code","source":["#정칙화\n","for x, y in train_dataloader:\n","    x = x.to(device)\n","    y = y.to(device)\n","\n","    output = model(x)\n","\n","    _lambda = 0.5\n","    l1_loss = sum(p.abs().sum() for p in model.parameters())\n","\n","    loss = criterion(output, y) + _lambda * l1_loss"],"metadata":{"id":"tHQiAitDHve1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KbiAYJEeHvZW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"e-gJPluZHvKb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 필요한 라이브러리 임포트\n","import torch # PyTorch 라이브러리\n","import pandas as pd # 데이터 처리 라이브러리\n","from torch import nn # 신경망 모듈\n","from torch import optim # 옵티마이저 모듈\n","from torch.utils.data import Dataset, DataLoader, random_split # 데이터 유틸리티\n","\n","# 사용자 정의 데이터셋 클래스 정의\n","class CustomDataset(Dataset):\n","    def __init__(self, file_path):\n","        # CSV 파일 로드 및 특성(x)과 레이블(y) 분리\n","        df = pd.read_csv(file_path)\n","        self.x1 = df.iloc[:, 0].values\n","        self.x2 = df.iloc[:, 1].values\n","        self.x3 = df.iloc[:, 2].values\n","        self.y = df.iloc[:, 3].values\n","        self.length = len(df) # 데이터셋의 총 길이\n","\n","    def __getitem__(self, index):\n","        # 특정 인덱스의 데이터와 레이블을 PyTorch 텐서로 반환\n","        x = torch.FloatTensor([self.x1[index], self.x2[index], self.x3[index]])\n","        y = torch.FloatTensor([int(self.y[index])])\n","        return x, y\n","\n","    def __len__(self):\n","        # 데이터셋의 총 길이 반환\n","        return self.length\n","\n","# 사용자 정의 모델 클래스 정의\n","class CustomModel(nn.Module):\n","    def __init__(self):\n","        super().__init__() # 부모 클래스 초기화\n","        # 선형 레이어와 시그모이드 활성화 함수로 구성된 순차적 모델 정의\n","        self.layer = nn.Sequential(\n","            nn.Linear(3, 1), # 입력 3개, 출력 1개인 선형 레이어\n","            nn.Sigmoid(),     # 0과 1 사이의 값으로 변환하는 시그모이드 활성화 함수\n","\n","             # --- 새로운 레이어 추가 시작 ---\n","            nn.Linear(1, 1), # 이전 레이어의 출력 1개를 받아 1개의 출력을 내는 선형 레이어\n","            nn.Sigmoid(),    # 활성화 함수 (예: 마지막 출력이 0과 1 사이여야 할 때)\n","            # --- 새로운 레이어 추가 끝 ---\n","\n","            # 배치정규화\n","            nn.BatchNorm1d(\n","                num_features=1,\n","                eps=1e-05,\n","                momentum=0.1,\n","                affine=True,\n","                track_running_stats=True,\n","            )\n","        )\n","\n","    def forward(self, x):\n","        # 모델의 순전파 로직 정의\n","        x = self.layer(x)\n","        return x\n","\n","    x\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":349},"id":"xpEZZGl6Gidy","executionInfo":{"status":"error","timestamp":1753098454458,"user_tz":-540,"elapsed":9,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"65a0f3c6-784e-47b3-91cc-0ae148ecea2f"},"execution_count":7,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'x' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-7-871089597.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;31m# 사용자 정의 모델 클래스 정의\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m \u001b[0;32mclass\u001b[0m \u001b[0mCustomModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mModule\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# 부모 클래스 초기화\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipython-input-7-871089597.py\u001b[0m in \u001b[0;36mCustomModel\u001b[0;34m()\u001b[0m\n\u001b[1;32m     56\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m     \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"]}]},{"cell_type":"code","source":["# 필요한 라이브러리 임포트\n","import torch # PyTorch 라이브러리\n","import pandas as pd # 데이터 처리 라이브러리\n","from torch import nn # 신경망 모듈\n","from torch import optim # 옵티마이저 모듈\n","from torch.utils.data import Dataset, DataLoader, random_split # 데이터 유틸리티\n","\n","# 사용자 정의 데이터셋 클래스 정의\n","class CustomDataset(Dataset):\n","    def __init__(self, file_path):\n","        # CSV 파일 로드 및 특성(x)과 레이블(y) 분리\n","        df = pd.read_csv(file_path)\n","        self.x1 = df.iloc[:, 0].values\n","        self.x2 = df.iloc[:, 1].values\n","        self.x3 = df.iloc[:, 2].values\n","        self.y = df.iloc[:, 3].values\n","        self.length = len(df) # 데이터셋의 총 길이\n","\n","    def __getitem__(self, index):\n","        # 특정 인덱스의 데이터와 레이블을 PyTorch 텐서로 반환\n","        x = torch.FloatTensor([self.x1[index], self.x2[index], self.x3[index]])\n","        y = torch.FloatTensor([int(self.y[index])])\n","        return x, y\n","\n","    def __len__(self):\n","        # 데이터셋의 총 길이 반환\n","        return self.length\n","\n","# 사용자 정의 모델 클래스 정의\n","class CustomModel(nn.Module):\n","    def __init__(self):\n","        super().__init__() # 부모 클래스 초기화\n","        # 선형 레이어와 시그모이드 활성화 함수로 구성된 순차적 모델 정의\n","        self.layer = nn.Sequential(\n","            nn.Linear(3, 1), # 입력 3개, 출력 1개인 선형 레이어\n","            nn.Sigmoid()     # 0과 1 사이의 값으로 변환하는 시그모이드 활성화 함수\n","            )\n","\n","    def forward(self, x):\n","        # 모델의 순전파 로직 정의\n","        x = self.layer(x)\n","        return x\n","\n","# 데이터셋 로드, 분할 및 데이터로더 생성\n","dataset = CustomDataset(\"./datasets/binary.csv\") # CustomDataset 객체 생성 (데이터 파일 경로 지정)\n","dataset_size = len(dataset)                       # 전체 데이터셋 크기\n","train_size = int(dataset_size * 0.8)              # 훈련 세트 크기 (80%)\n","validation_size = int(dataset_size * 0.1)         # 검증 세트 크기 (10%)\n","test_size = dataset_size - train_size - validation_size # 테스트 세트 크기 (나머지)\n","\n","# 데이터셋을 훈련, 검증, 테스트 세트로 무작위 분할 (재현성을 위해 시드 고정)\n","train_dataset, validation_dataset, test_dataset = random_split(\n","    dataset, [train_size, validation_size, test_size], torch.manual_seed(4)\n",")\n","\n","# DataLoader를 사용하여 각 데이터셋을 미니 배치 단위로 준비\n","train_dataloader = DataLoader(train_dataset, batch_size=64, shuffle=True, drop_last=True)\n","validation_dataloader = DataLoader(validation_dataset, batch_size=4, shuffle=True, drop_last=True)\n","test_dataloader = DataLoader(test_dataset, batch_size=4, shuffle=True, drop_last=True)\n","\n","# GPU 연산 적용 및 모델 설정\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\" # GPU(CUDA) 사용 가능 여부 확인 후 디바이스 설정\n","model = CustomModel().to(device)                       # CustomModel 인스턴스 생성 및 디바이스로 이동\n","criterion = nn.BCELoss().to(device)                    # 이진 교차 엔트로피 손실 함수 정의 및 디바이스로 이동\n","optimizer = optim.SGD(model.parameters(), lr=0.0001)   # SGD 옵티마이저 정의 (모델 파라미터와 학습률 지정)\n","\n","# 모델 학습 진행 (Training Loop)\n","for epoch in range(10000): # 총 10,000 에포크 동안 학습 반복\n","    cost = 0.0 # 현재 에포크의 누적 손실 초기화\n","\n","    for x, y in train_dataloader: # 훈련 데이터로더에서 배치 단위로 데이터 가져오기\n","        x = x.to(device) # 입력 데이터를 디바이스로 이동\n","        y = y.to(device) # 레이블 데이터를 디바이스로 이동\n","\n","        output = model(x) # 순전파: 모델을 통해 예측값 계산\n","        loss = criterion(output, y) # 손실 계산: 예측값과 실제값 비교\n","\n","        optimizer.zero_grad() # 이전 경사값 초기화\n","        loss.backward()       # 역전파: 손실에 대한 경사 계산\n","        optimizer.step()      # 파라미터 업데이트: 계산된 경사를 이용해 모델 가중치 조정\n","\n","        cost += loss # 현재 배치 손실을 누적\n","\n","    cost = cost / len(train_dataloader) # 에포크의 평균 손실 계산\n","\n","    if (epoch + 1) % 1000 == 0: # 1000 에포크마다 진행 상황 출력\n","        print(f\"Epoch : {epoch+1:4d}, Model : {list(model.parameters())}, Cost : {cost:.3f}\")\n","\n","# 모델 평가\n","with torch.no_grad(): # 평가 시 경사 계산 비활성화\n","    model.eval()     # 모델을 평가 모드로 전환 (Dropout, BatchNorm 등 영향)\n","    for x, y in validation_dataloader: # 검증 데이터로더에서 배치 가져오기\n","        x = x.to(device) # 입력 데이터를 디바이스로 이동\n","        y = y.to(device) # 레이블 데이터를 디바이스로 이동\n","\n","        outputs = model(x) # 모델의 예측값 계산\n","\n","        print(outputs) # 원본 예측 확률 출력\n","        # 0.5를 기준으로 이진 분류 결과 출력 (True/False)\n","        print(outputs >= torch.FloatTensor([0.5]).to(device))\n","        print(\"--------------------\") # 배치 구분선\n","\n","# 모델 저장\n","# 전체 모델 저장 (환경 종속성 있음, 개발/테스트용)\n","torch.save(\n","    model,\n","    \".models/250719_model.pt\"\n",")\n","\n","# 모델의 state_dict (파라미터만) 저장 (권장되는 방법, 유연성 높음)\n","torch.save(\n","    model.state_dict(),\n","    \".models/250719_model_state_dict\"\n",")"],"metadata":{"id":"cadljCZ5mokj","colab":{"base_uri":"https://localhost:8080/","height":110},"executionInfo":{"status":"error","timestamp":1753087261855,"user_tz":-540,"elapsed":15,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"9bc8b0e3-d640-4699-b86e-e71dd1676303"},"execution_count":18,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax. Perhaps you forgot a comma? (ipython-input-18-3817684846.py, line 36)","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-18-3817684846.py\"\u001b[0;36m, line \u001b[0;32m36\u001b[0m\n\u001b[0;31m    nn.Sigmoid()     # 0과 1 사이의 값으로 변환하는 시그모이드 활성화 함수\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"]}]}]}