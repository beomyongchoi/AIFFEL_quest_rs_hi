{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOsjr5hkkunxcBRr+NXvmvK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ZAa0lrwZqP5","executionInfo":{"status":"ok","timestamp":1753103433185,"user_tz":-540,"elapsed":1399,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"a0e1e097-25b3-4f57-e4ca-61c9451ca433"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/AIFFEL_quest_rs/Exploration/Quest01/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Op9IL8yZ5E-","executionInfo":{"status":"ok","timestamp":1753103440860,"user_tz":-540,"elapsed":19,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"0b898c6e-6b72-416e-b615-f8ed2f3f773d"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/AIFFEL_quest_rs/Exploration/Quest01\n"]}]},{"cell_type":"code","source":["!git pull origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5WwEfVVgc_5N","executionInfo":{"status":"ok","timestamp":1753098599352,"user_tz":-540,"elapsed":8814,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"6ae67af6-9a7f-4b13-d9bd-5baa7dd89b3a"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["From https://github.com/nagujean/AIFFEL_quest_rs\n"," * branch            main       -> FETCH_HEAD\n","Already up to date.\n"]}]},{"cell_type":"code","source":["!git add ."],"metadata":{"id":"WMq5kdVVFYhT","executionInfo":{"status":"ok","timestamp":1753098612913,"user_tz":-540,"elapsed":10564,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["  !git config --global user.email \"nagujean@gmail.com\"\n","  !git config --global user.name \"nagujean\""],"metadata":{"id":"HN_-_4mVFvEK","executionInfo":{"status":"ok","timestamp":1753098615357,"user_tz":-540,"elapsed":203,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["!git commit -m \"commit\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iFM2Q2KOFfS9","executionInfo":{"status":"ok","timestamp":1753098634111,"user_tz":-540,"elapsed":17658,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"740e8c47-efd9-4125-cda5-08e2d89b3bfb"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["[main f31482b] commit\n"," 1 file changed, 1 insertion(+), 1 deletion(-)\n"," rewrite \"Exploration/Quest01/pytoch_3.ipynb\\341\\204\\213\\341\\205\\264 \\341\\204\\211\\341\\205\\241\\341\\204\\207\\341\\205\\251\\341\\206\\253\" (95%)\n"]}]},{"cell_type":"code","source":["!git push origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DDsPOZ5YF9ub","executionInfo":{"status":"ok","timestamp":1753098645583,"user_tz":-540,"elapsed":2259,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"b06de0e1-bc81-463c-924f-29193195c99a"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Enumerating objects: 9, done.\n","Counting objects:  11% (1/9)\rCounting objects:  22% (2/9)\rCounting objects:  33% (3/9)\rCounting objects:  44% (4/9)\rCounting objects:  55% (5/9)\rCounting objects:  66% (6/9)\rCounting objects:  77% (7/9)\rCounting objects:  88% (8/9)\rCounting objects: 100% (9/9)\rCounting objects: 100% (9/9), done.\n","Delta compression using up to 2 threads\n","Compressing objects:  20% (1/5)\rCompressing objects:  40% (2/5)\rCompressing objects:  60% (3/5)\rCompressing objects:  80% (4/5)\rCompressing objects: 100% (5/5)\rCompressing objects: 100% (5/5), done.\n","Writing objects:  20% (1/5)\rWriting objects:  40% (2/5)\rWriting objects:  60% (3/5)\rWriting objects:  80% (4/5)\rWriting objects: 100% (5/5)\rWriting objects: 100% (5/5), 3.02 KiB | 343.00 KiB/s, done.\n","Total 5 (delta 4), reused 0 (delta 0), pack-reused 0\n","remote: Resolving deltas: 100% (4/4), completed with 4 local objects.\u001b[K\n","To https://github.com/nagujean/AIFFEL_quest_rs.git\n","   ef1a820..f31482b  main -> main\n"]}]},{"cell_type":"code","source":["import torch\n","\n","\n","x = torch.FloatTensor(\n","    [\n","        [-0.6577, -0.5797, 0.6360],\n","        [0.7392, 0.2145, 1.523],\n","        [0.2432, 0.5662, 0.322]\n","    ]\n",")"],"metadata":{"id":"K30Yk6K3GT9i","executionInfo":{"status":"ok","timestamp":1753103446647,"user_tz":-540,"elapsed":6,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["import torch\n","from torch import nn\n","\n","\n","x = torch.FloatTensor(\n","    [\n","        [-0.6577, -0.5797, 0.6360],\n","        [0.7392, 0.2145, 1.523],\n","        [0.2432, 0.5662, 0.322]\n","    ]\n",")\n","\n","print(nn.BatchNorm1d(3)(x))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SOZYOVB1GVEq","executionInfo":{"status":"ok","timestamp":1753103448795,"user_tz":-540,"elapsed":10,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"25de45ab-6439-4e9a-bcaf-13ff0a55d35f"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-1.3246, -1.3492, -0.3756],\n","        [ 1.0912,  0.3077,  1.3685],\n","        [ 0.2334,  1.0415, -0.9930]], grad_fn=<NativeBatchNormBackward0>)\n"]}]},{"cell_type":"code","source":["from torch import nn\n","\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.layer = nn.Sequential(\n","            nn.Linear(1, 2),\n","            nn.Sigmoid()\n","        )\n","        self.fc = nn.Linear(2, 1)\n","        self._init_weights()\n","\n","    def _init_weights(self):\n","        nn.init.xavier_uniform_(self.layer[0].weight)\n","        self.layer[0].bias.data.fill_(0.01)\n","\n","        nn.init.xavier_uniform_(self.fc.weight)\n","        self.fc.bias.data.fill_(0.01)\n","\n","\n","model = Net()"],"metadata":{"id":"q0gbaP87GcMy","executionInfo":{"status":"ok","timestamp":1753103451224,"user_tz":-540,"elapsed":4,"user":{"displayName":"김형일","userId":"09633833925626345996"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["from torch import nn\n","\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.layer = nn.Sequential(\n","            nn.Linear(1, 2),\n","            nn.Sigmoid()\n","        )\n","        self.fc = nn.Linear(2, 1)\n","        self.apply(self._init_weights)\n","\n","    def _init_weights(self, module):\n","        if isinstance(module, nn.Linear):\n","            nn.init.xavier_uniform_(module.weight)\n","            nn.init.constant_(module.bias, 0.01)\n","        print(f\"Apply : {module}\")\n","\n","\n","model = Net()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xoNIFJRnGoE9","executionInfo":{"status":"ok","timestamp":1753086812702,"user_tz":-540,"elapsed":34,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"744cabaf-535f-4e15-9d5f-5d8e7ef5f39f"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Apply : Linear(in_features=1, out_features=2, bias=True)\n","Apply : Sigmoid()\n","Apply : Sequential(\n","  (0): Linear(in_features=1, out_features=2, bias=True)\n","  (1): Sigmoid()\n",")\n","Apply : Linear(in_features=2, out_features=1, bias=True)\n","Apply : Net(\n","  (layer): Sequential(\n","    (0): Linear(in_features=1, out_features=2, bias=True)\n","    (1): Sigmoid()\n","  )\n","  (fc): Linear(in_features=2, out_features=1, bias=True)\n",")\n"]}]},{"cell_type":"code","source":["#정칙화\n","for x, y in train_dataloader:\n","    x = x.to(device)\n","    y = y.to(device)\n","\n","    output = model(x)\n","\n","    _lambda = 0.5\n","    l1_loss = sum(p.abs().sum() for p in model.parameters())\n","\n","    loss = criterion(output, y) + _lambda * l1_loss"],"metadata":{"id":"tHQiAitDHve1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KbiAYJEeHvZW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e-gJPluZHvKb","executionInfo":{"status":"ok","timestamp":1753103021670,"user_tz":-540,"elapsed":110,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"f48acc6f-e2d2-46c7-b13d-6f6432bc1a95"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":[" datasets\t  pytoch_2.ipynb\t   pytorch_1.ipynb\n"," models\t\t  pytoch_3.ipynb\t   Quest01.ipynb\n"," non_linear.csv  'pytoch_3.ipynb의 사본'   README.md\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"bjQtrXkN0ICm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 필요한 라이브러리 임포트\n","import torch # PyTorch 라이브러리\n","import pandas as pd # 데이터 처리 라이브러리\n","from torch import nn # 신경망 모듈\n","from torch import optim # 옵티마이저 모듈\n","from torch.utils.data import Dataset, DataLoader, random_split # 데이터 유틸리티\n","\n","# 사용자 정의 데이터셋 클래스 정의\n","class CustomDataset(Dataset):\n","    def __init__(self, file_path):\n","        # CSV 파일 로드 및 특성(x)과 레이블(y) 분리\n","        df = pd.read_csv(file_path)\n","        self.x1 = df.iloc[:, 0].values\n","        self.x2 = df.iloc[:, 1].values\n","        self.x3 = df.iloc[:, 2].values\n","        self.y = df.iloc[:, 3].values\n","        self.length = len(df) # 데이터셋의 총 길이\n","\n","    def __getitem__(self, index):\n","        # 특정 인덱스의 데이터와 레이블을 PyTorch 텐서로 반환\n","        x = torch.FloatTensor([self.x1[index], self.x2[index], self.x3[index]])\n","        y = torch.FloatTensor([int(self.y[index])])\n","        return x, y\n","\n","    def __len__(self):\n","        # 데이터셋의 총 길이 반환\n","        return self.length\n","\n","# 사용자 정의 모델 클래스 정의\n","class CustomModel(nn.Module):\n","    def __init__(self):\n","        super().__init__() # 부모 클래스 초기화\n","        # 선형 레이어와 시그모이드 활성화 함수로 구성된 순차적 모델 정의\n","        self.layer = nn.Sequential(\n","            nn.Linear(3, 1), # 입력 3개, 출력 1개인 선형 레이어\n","            nn.Sigmoid()     # 0과 1 사이의 값으로 변환하는 시그모이드 활성화 함수\n","            )\n","\n","    def forward(self, x):\n","        # 모델의 순전파 로직 정의\n","        x = self.layer(x)\n","        return x\n","\n","# 데이터셋 로드, 분할 및 데이터로더 생성\n","dataset = CustomDataset(\"./datasets/binary.csv\") # CustomDataset 객체 생성 (데이터 파일 경로 지정)\n","dataset_size = len(dataset)                       # 전체 데이터셋 크기\n","train_size = int(dataset_size * 0.8)              # 훈련 세트 크기 (80%)\n","validation_size = int(dataset_size * 0.1)         # 검증 세트 크기 (10%)\n","test_size = dataset_size - train_size - validation_size # 테스트 세트 크기 (나머지)\n","\n","# 데이터셋을 훈련, 검증, 테스트 세트로 무작위 분할 (재현성을 위해 시드 고정)\n","train_dataset, validation_dataset, test_dataset = random_split(\n","    dataset, [train_size, validation_size, test_size], torch.manual_seed(4)\n",")\n","\n","# DataLoader를 사용하여 각 데이터셋을 미니 배치 단위로 준비\n","train_dataloader = DataLoader(train_dataset, batch_size=64, shuffle=True, drop_last=True)\n","validation_dataloader = DataLoader(validation_dataset, batch_size=4, shuffle=True, drop_last=True)\n","test_dataloader = DataLoader(test_dataset, batch_size=4, shuffle=True, drop_last=True)\n","\n","# GPU 연산 적용 및 모델 설정\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\" # GPU(CUDA) 사용 가능 여부 확인 후 디바이스 설정\n","model = CustomModel().to(device)                       # CustomModel 인스턴스 생성 및 디바이스로 이동\n","criterion = nn.BCELoss().to(device)                    # 이진 교차 엔트로피 손실 함수 정의 및 디바이스로 이동\n","optimizer = optim.SGD(model.parameters(), lr=0.0001)   # SGD 옵티마이저 정의 (모델 파라미터와 학습률 지정)\n","\n","# 모델 학습 진행 (Training Loop)\n","for epoch in range(10000): # 총 10,000 에포크 동안 학습 반복\n","    cost = 0.0 # 현재 에포크의 누적 손실 초기화\n","\n","    for x, y in train_dataloader: # 훈련 데이터로더에서 배치 단위로 데이터 가져오기\n","        x = x.to(device) # 입력 데이터를 디바이스로 이동\n","        y = y.to(device) # 레이블 데이터를 디바이스로 이동\n","\n","        output = model(x) # 순전파: 모델을 통해 예측값 계산\n","        loss = criterion(output, y) # 손실 계산: 예측값과 실제값 비교\n","\n","        optimizer.zero_grad() # 이전 경사값 초기화\n","        loss.backward()       # 역전파: 손실에 대한 경사 계산\n","        optimizer.step()      # 파라미터 업데이트: 계산된 경사를 이용해 모델 가중치 조정\n","\n","        cost += loss # 현재 배치 손실을 누적\n","\n","    cost = cost / len(train_dataloader) # 에포크의 평균 손실 계산\n","\n","    if (epoch + 1) % 1000 == 0: # 1000 에포크마다 진행 상황 출력\n","        print(f\"Epoch : {epoch+1:4d}, Model : {list(model.parameters())}, Cost : {cost:.3f}\")\n","\n","# 모델 평가\n","with torch.no_grad(): # 평가 시 경사 계산 비활성화\n","    model.eval()     # 모델을 평가 모드로 전환 (Dropout, BatchNorm 등 영향)\n","    for x, y in validation_dataloader: # 검증 데이터로더에서 배치 가져오기\n","        x = x.to(device) # 입력 데이터를 디바이스로 이동\n","        y = y.to(device) # 레이블 데이터를 디바이스로 이동\n","\n","        outputs = model(x) # 모델의 예측값 계산\n","\n","        print(outputs) # 원본 예측 확률 출력\n","        # 0.5를 기준으로 이진 분류 결과 출력 (True/False)\n","        print(outputs >= torch.FloatTensor([0.5]).to(device))\n","        print(\"--------------------\") # 배치 구분선\n","\n","# 모델 저장\n","# 전체 모델 저장 (환경 종속성 있음, 개발/테스트용)\n","torch.save(\n","    model,\n","    \".models/250719_model.pt\"\n",")\n","\n","# 모델의 state_dict (파라미터만) 저장 (권장되는 방법, 유연성 높음)\n","torch.save(\n","    model.state_dict(),\n","    \".models/250719_model_state_dict\"\n",")"],"metadata":{"id":"cadljCZ5mokj","colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"status":"error","timestamp":1753103455661,"user_tz":-540,"elapsed":15,"user":{"displayName":"김형일","userId":"09633833925626345996"}},"outputId":"650ce4bf-1374-4849-fee8-62bcd34849ab"},"execution_count":59,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"CUDA error: device-side assert triggered\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-59-2436718356.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;31m# 데이터셋을 훈련, 검증, 테스트 세트로 무작위 분할 (재현성을 위해 시드 고정)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m train_dataset, validation_dataset, test_dataset = random_split(\n\u001b[0;32m---> 53\u001b[0;31m     \u001b[0mdataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtrain_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmanual_seed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     54\u001b[0m )\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/_compile.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     30\u001b[0m                 \u001b[0mfn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__dynamo_disable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisable_fn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdisable_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/_dynamo/eval_frame.py\u001b[0m in \u001b[0;36m_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    743\u001b[0m             )\n\u001b[1;32m    744\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 745\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    746\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    747\u001b[0m                 \u001b[0m_maybe_set_eval_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprior\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/random.py\u001b[0m in \u001b[0;36mmanual_seed\u001b[0;34m(seed)\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_in_bad_fork\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmanual_seed_all\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m     \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmps\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/cuda/random.py\u001b[0m in \u001b[0;36mmanual_seed_all\u001b[0;34m(seed)\u001b[0m\n\u001b[1;32m    125\u001b[0m             \u001b[0mdefault_generator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmanual_seed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m     \u001b[0m_lazy_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed_all\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/cuda/__init__.py\u001b[0m in \u001b[0;36m_lazy_call\u001b[0;34m(callable, **kwargs)\u001b[0m\n\u001b[1;32m    247\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_lazy_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcallable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    248\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 249\u001b[0;31m         \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    250\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    251\u001b[0m         \u001b[0;31m# TODO(torch_deploy): this accesses linecache, which attempts to read the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/cuda/random.py\u001b[0m in \u001b[0;36mcb\u001b[0;34m()\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m             \u001b[0mdefault_generator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdefault_generators\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m             \u001b[0mdefault_generator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmanual_seed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0m_lazy_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed_all\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: CUDA error: device-side assert triggered\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n"]}]}]}